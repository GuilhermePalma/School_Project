@model SchoolProject.Models.Client

@{
    ViewBag.Title = "Excluir Cliente";

    if (Model == null || Model.Cpf.Length != 11)
    {
        <div class="alert alert-danger" role="alert">
            <h4><b>Não é Possivel Acessar essa Pagina</b></h4>
            <p>
                Recomendamos que Faça a navegação pelo Site usando as opções 
                 disponibilizadas após realizar o @Html.ActionLink("Login", "Index", "Client")
            </p>
            <p><i>Parametros Invalidos</i></p>            
            <br />

            @Html.ActionLink("Login", "Index", "Client", new { } ,new { @class = "btn btn-primary" })
            @Html.ActionLink("Cadastro", "Cadastro", "Client", new { } ,new { @class = "btn btn-primary" })
            @Html.ActionLink("Pagina Inicial", "Index", "Home", new { } ,new { @class = "btn btn-default" })
        </div>
    }
    else
    {
        string cpf_formmated = Model.FormattedCPF(Model.Cpf);
        string phone_formmated = Model.FormattedPhone(Model.Ddd, Model.Telefone);
        string cep_formatted = new SchoolProject.Models.Address().FormattedCepMask(Model.Cep);

        <h2>@ViewBag.Title: @Model.Name</h2>
        <hr />

        <h3>Você tem certeza que deseja Excluir ?</h3>
        <p class="alert alert-warning">Após Clicar no botão "Excluir", não é possivel reverter o Processo</p>

        <dl class="dl-horizontal">

            <dt>
                @Html.DisplayNameFor(model => model.Name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Cpf)
            </dt>

            <dd>
                @cpf_formmated
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Telefone)
            </dt>

            <dd>
                @phone_formmated
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Cidade)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Cidade) - @Html.DisplayFor(model => model.Estado)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Logradouro)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Logradouro)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Cep)
            </dt>

            <dd>
                @cep_formatted
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Numero)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Numero)
            </dd>

            @if (!string.IsNullOrEmpty(Model.Complemento))
            {
                <dt>
                    @Html.DisplayNameFor(model => model.Complemento)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Complemento)
                </dd>
            }

        </dl>
            
        using (Html.BeginForm())
        {
            Html.AntiForgeryToken();
            <div class="col-md-offset-1">
                <input type="submit" value="Excluir" class="btn btn-default" />
            </div>
        }

        <br />

        using (Html.BeginForm("Login", "Client", new { Cpf = Model.Cpf }, FormMethod.Post))
        {
            <button type="submit" value="Login" class="btn btn-default">« Voltar</button>
        }
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}